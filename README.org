* also-ran
 tools for matching and seeding existing rips
* tools
** transmission-get-flac-metadata.py
Usage: ~./transmission-get-flac-metadata.py --help~

Retrieves metadata from flac files within a torrent without downloading entire files.

1. Add your torrent to transmission
   ~transmission-remote --add demo.torrent~
2. Make note of your torrent's ID
   ~transmission-remote --list | rg demo~
3. Run the script
   ~./transmission-get-flac-metadata.py -t 32 --progress~
4. Examine ~.flac.part~ files in transmission's download directory.
** flac-match-headers.py
Usage: ~./flac-match-headers.py --help~

Makes metadata of flac files in an input directory match flac header files (e.g. .flac.parts from ~transmission-get-flac-metadata.py~) in another directory.

1. Rip your release to e.g. ~./rips~.
2. Make a temporary output directory then run the script with basic options
   ~./flac-match-headers.py --headers ./torrents/demo --in ./rips/demo --out ./out/demo~
3. When you get an ~AudioDiffersError~, decide which of the following is true:
   - You have a significantly different release (e.g. different TOC or peak levels) and matching will always fail.
   - Your audio extraction software is misconfigured.
   - The track should simply be skipped with ~--skip-track N~ (e.g. first/last tracks may differ in a few samples).
     You might have a [[https://wiki.hydrogenaud.io/index.php?title=Comparison_of_CD_rippers#AccurateRip_checking_across_pressings.2Foffsets][different pressing]].
4. It may be required to re-encode your rips if a different encoder version or config was used for the target.
   In this case, pass ~--flac ./path/to/appropriate/flac/version --flac-args '-original -args'~.
   You can also add various ~flac~ versions to your path; the script will look for ~flac-1.x.x~ before prompting.
5. After the script completes, verify matching with ~metaflac~
   #+BEGIN_SRC shell
   $ metaflac "./torrents/demo/01 - Intro.flac" --list > a
   $ metaflac "./out/demo/01 - Intro.flac" --list > b
   $ diff -u a b
   #+END_SRC
6. ~mv ./out/demo/* ./torrents/demo/~
7. ~transmission-remote -t 32 --verify~
8. ~transmission-remote -t 32 --start~
** transcode.py
Usage: ~./transcode.py --help~

Transcodes a directory of FLAC files to MP3 and copies auxilary files.

#+BEGIN_SRC shell
$ ls ./DemoFLAC
'01 - Intro.flac' Demo.cue Demo.m3u8
$ ./transcode-py -i ./DemoFLAC --preset 320
...
$ ls ./Demo320
'01 - Intro.mp3' Demo.cue Demo.m3u8
#+END_SRC
