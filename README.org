* also-ran
 tools for matching and seeding existing rips
* tools
** transmission-get-flac-metadata.py
Usage: ~./transmission-get-flac-metadata.py --help~

Retrieves metadata from flac files within a torrent without downloading entire files.

1. Add your torrent to transmission
   ~transmission-remote --add demo.torrent~
2. Make note of your torrent's ID
   ~transmission-remote --list | rg demo~
3. Run the script
   ~./transmission-get-flac-metadata.py -t 32 --progress~
4. Examine ~.flac.part~ files in transmission's download directory.
** flac-match-headers.py
Usage: ~./flac-match-headers.py --help~

Makes flac metadata match a folder of headers (e.g. .flac.parts from ~transmission-get-flac-metadata.py~).

1. Check the log for the torrent you're trying to match to determine EAC + libFLAC version to use.
2. Rip your release to ~./rips~ with said EAC + libFLAC version.
3. Compare TOC and CRCs to the torrent you're trying to match. If these differ then either your CD ripper is misconfigured or your CD is of a [[https://wiki.hydrogenaud.io/index.php?title=Comparison_of_CD_rippers#AccurateRip_checking_across_pressings.2Foffsets][different pressing]].
4. Make a temporary output directory then run the script
   ~./flac-match-headers.py --headers ./torrents/demo --in ./rips/demo --out ./out/demo~
5. Verify matching with ~metaflac~
   #+BEGIN_SRC shell
   $ metaflac "./torrents/demo/01 - Intro.flac" --list > a
   $ metaflac "./out/demo/01 - Intro.flac" --list > b
   $ diff -u a b
   #+END_SRC
6. ~mv ./out/demo/* ./torrents/demo/~
7. ~transmission-remote -t 32 --verify~
8. ~transmission-remote -t 32 --start~
** transcode.py
Usage: ~./transcode.py --help~

Transcodes a directory of FLAC files to MP3 and copies auxilary files.

#+BEGIN_SRC shell
$ ls ./DemoFLAC
'01 - Intro.flac' Demo.cue Demo.m3u8
$ ./transcode-py -i ./DemoFLAC --preset 320
...
$ ls ./Demo320
'01 - Intro.mp3' Demo.cue Demo.m3u8
#+END_SRC
